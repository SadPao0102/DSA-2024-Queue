1.Queue ต่างจาก Stack อย่างไร?

Queue เป็นโครงสร้างข้อมูลแบบ FIFO (First-In-First-Out) หมายความว่า ข้อมูลที่ถูกเพิ่มเข้ามาก่อนจะถูกนำออกก่อน

Stack เป็นโครงสร้างข้อมูลแบบ LIFO (Last-In-First-Out) หมายความว่า ข้อมูลที่ถูกเพิ่มเข้ามาล่าสุดจะถูกนำออกก่อน

2.เพราะเหตุใดการ dequeue จึงใช้ pop(0) แทนที่จะเป็น pop()?

pop(0) ใช้เพื่อนำข้อมูลตัวแรกของ Queue ออกตามหลักการ FIFO

pop() ตามปกติจะนำค่าล่าสุดออก ซึ่งเหมาะกับ Stack ที่ใช้หลักการ LIFO

3.ยกตัวอย่างการประยุกต์ใช้ Queue ในชีวิตประจำวัน

ระบบคิวธนาคาร: ลูกค้าที่มาก่อนจะได้รับบริการก่อน

สายพานลำเลียงในโรงงาน: สินค้าที่ถูกวางบนสายพานก่อนจะถูกนำไปใช้ก่อน

ระบบพิมพ์เอกสาร (Print Queue): ไฟล์ที่ส่งไปพิมพ์ก่อนจะถูกพิมพ์ก่อน

4.หากต้องการทำ Priority Queue จะต้องปรับปรุงโค้ดอย่างไร?

ต้องใช้โครงสร้างข้อมูลที่รองรับการเรียงลำดับ เช่น Heap หรือ Sorted List

สามารถใช้ heapq ใน Python เพื่อสร้าง Priority Queue โดยเก็บข้อมูลในรูปของ (priority, value)

ตัวอย่างการใช้ heapq:

python
คัดลอก
แก้ไข
import heapq

pq = []
heapq.heappush(pq, (1, "งานเร่งด่วน"))
heapq.heappush(pq, (3, "งานทั่วไป"))
heapq.heappush(pq, (2, "งานปานกลาง"))

while pq:
    print(heapq.heappop(pq))  # นำข้อมูลที่มี priority น้อยที่สุดออกก่อน
ผลลัพธ์ที่ได้:

bash
คัดลอก
แก้ไข
(1, 'งานเร่งด่วน')
(2, 'งานปานกลาง')
(3, 'งานทั่วไป')







